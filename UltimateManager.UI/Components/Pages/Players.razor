@page "/players"
@using UltimateManager.Data.Repositories
@using UltimateManager.Domain.Models
@inject PlayerRepository PlayerRepository
@inject TeamRepository TeamRepository

<PageTitle>Players</PageTitle>

<h1>Players</h1>

<button class="btn btn-primary" @onclick="CreatePlayer">
    @if (newPlayerButtonStatus)
    {
        <span> Cancel </span>
    }
    else
    {
        <span> New Player </span>
    }
</button>

<button class="btn btn-outline-info" @onclick="UpdateAllPlayersOverall">
    Update All Players Overall
</button>

@if (newPlayerButtonStatus)
{
    <form class="form-horizontal" @onsubmit="HandleSubmit">
        <div class="mb-3">
            <label for="newPlayerFirstName" class="form-label">First Name</label>
            <input type="text" class="form-control" id="newPlayerFirstName" @bind-value="newPlayer.FirstName" required />
        </div>
        <div class="mb-3">
            <label for="newPlayerLastName" class="form-label">Last Name</label>
            <input type="text" class="form-control" id="newPlayerLastName" @bind-value="newPlayer.LastName" required />
        </div>
        <div class="mb-3">
            <label for="newPlayerBirthYear" class="form-label">Year of Birth</label>
            <input type="number" class="form-control" id="newPlayerBirthYear" @bind-value="newPlayer.BirthYear" min="1900" max="@DateTime.Now.Year" required />
        </div>
        <div class="mb-3">
            <label for="newPlayerPositions" class="form-label">Positions</label>
            <div>
                @foreach(var position in allPositions)
                {
                    <div>
                        <input type="checkbox" id="position_@position.Id" @onchange="(e) => OnPositionCheckboxChanged(e, position.Id)" checked="@selectedPositionIds.Contains(position.Id)" />
                        <label for="position_@position.Id">@position.PositionSpecified</label>
                    </div>
                }
            </div>
        </div>
        <div class="mb-3" style="border-radius:5px;border:1px solid #ddd;padding: 8px;display:flex;flex-direction:row;">

            <div style="background-color: #ddd;margin-left: 2px;"> 
                <input style="width: 60px;" min="0" max="99" type="number" placeholder="DEF" @bind-value="playerAttributes.Defending"/>
                <input style="width: 60px;" min="0" max="99" type="number" placeholder="ATT" @bind-value="playerAttributes.Attacking" />
                <input style="width: 60px;" min="0" max="99" type="number" placeholder="SPD" @bind-value="playerAttributes.Speed" />
                <input style="width: 60px;" min="0" max="99" type="number" placeholder="PAS" @bind-value="playerAttributes.Passing" />
                <input style="width: 60px;" min="0" max="99" type="number" placeholder="SHO" @bind-value="playerAttributes.Shooting" />
                <input style="width: 60px;" min="0" max="99" type="number" placeholder="INT" @bind-value="playerAttributes.Intelligence" />
                <input style="width: 60px;" min="0" max="99" type="number" placeholder="PHY" @bind-value="playerAttributes.Physical" />
                <input style="width: 60px;" type="number" placeholder="GLK" @bind-value="playerAttributes.Goalkeeping" />
            </div>

        </div>
        <div class="mb-3">
            <label for="newPlayerTeam" class="form-label">Team</label>
            <select class="form-select" id="newPlayerTeam" @bind="newPlayer.TeamId" required>
                <option value="">Select Team</option>
                @foreach (var team in allTeams)
                {
                    <option value="@team.Id">@team.Name</option>
                }
            </select>
        </div>
        <button type="submit" class="btn btn-success">Add</button>
    </form>
}

@if (newPlayerList != null && newPlayerButtonStatus)
{
    <h2>New Players</h2>
    <table class="table">
        @foreach (var player in newPlayerList)
        {
            <tr>
                <td>@player.FirstName</td>
                <td>@player.LastName</td>
                <td>@player.BirthYear</td>
                <td>@player.Team?.Name</td>
                <td>
                    @foreach (var position in player.PlayerPositions)
                    {
                        <span>@position.PositionSpecified</span>

                        <br />
                    }
                </td>
            </tr>
        }
    </table>
    <button class="btn btn-success" @onclick="SubmitNewPlayers">Submit All</button>
}

<hr />

@if (allPlayers == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th> Name </th>
                <th> Age </th>
                <th> Overall </th>
                <th> Team </th>
                <th> Positions </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var player in allPlayers)
            {
                <tr>
                    <td>@player.FirstName @player.LastName</td>
                    <td>@PlayerRepository.CalculateAge(player)</td>
                    <td>@player.Overall</td>
                    <td>@player.Team?.Name</td>
                    <td>@PlayerRepository.PositionShortener(player)</td>
                    <td>
                        <button class="btn btn-danger" @onclick="() => DeletePlayer(player)"> 🗙 </button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    List<Team> allTeams = new();
    List<Player> allPlayers = new();
    List<PlayerPosition> allPositions = new();
    List<Player> newPlayerList = new();
    Player newPlayer = new();
    List<int> selectedPositionIds = new();
    PlayerAttributes playerAttributes = new();

    private bool newPlayerButtonStatus = false;

    protected override async Task OnInitializedAsync()
    {
        allPlayers = await PlayerRepository.GetAllPlayersAsync();
        allTeams = (await TeamRepository.GetAllTeamsAsync()).OrderBy(t => t.Name).ToList();
        allPositions = await PlayerRepository.GetAllPositionsAsync();
    }

    private void CreatePlayer()
    {
        newPlayerButtonStatus = !newPlayerButtonStatus;
    }

    private void AddToPlayerList()
    {
        if (string.IsNullOrWhiteSpace(newPlayer.FirstName))
        {
            Console.WriteLine("Player name cannot be empty.");
            return;
        }

        var selectedTeam = allTeams.FirstOrDefault(t => t.Id == newPlayer.TeamId);
        newPlayer.Team = selectedTeam;

        newPlayer.PlayerAttributes = playerAttributes;

        newPlayer.PlayerPositions = new List<PlayerPosition>();
        foreach (var positionId in selectedPositionIds)
        {
            var position = allPositions.FirstOrDefault(p => p.Id == positionId);
            if (position != null)
            {
                newPlayer.PlayerPositions.Add(position);
            }
        }

        newPlayerList.Add(newPlayer);
        ResetNewPlayerForm();
    }

    private void ResetNewPlayerForm()
    {
        newPlayer = new();
        selectedPositionIds = new();
        playerAttributes = new();
    }

    private async Task HandleSubmit()
    {
        AddToPlayerList();
        await Task.CompletedTask;
    }

    private async Task SubmitNewPlayers()
    {
        foreach (var player in newPlayerList)
        {
            await PlayerRepository.SavePlayerAsync(player);
        }
        newPlayerList.Clear();
        allPlayers = await PlayerRepository.GetAllPlayersAsync();
    }

    private async Task DeletePlayer(Player player)
    {
        await PlayerRepository.DeletePlayerAsync(player);
        allPlayers = await PlayerRepository.GetAllPlayersAsync();
        StateHasChanged();
    }

    private void OnPositionCheckboxChanged(ChangeEventArgs e, int positionId)
    {
        var isChecked = (bool)e.Value;
        if (isChecked)
        {
            if (!selectedPositionIds.Contains(positionId))
            {
                selectedPositionIds.Add(positionId);
            }
        }
        else
        {
            if (selectedPositionIds.Contains(positionId))
            {
                selectedPositionIds.Remove(positionId);
            }
        }
    }

    private async Task UpdateAllPlayersOverall()
    {
        await PlayerRepository.UpdateAllPlayersOverallAsync();
    }
}
