@page "/playmatch"
@using UltimateManager.Data.Repositories
@using UltimateManager.Domain.Models
@inject TeamRepository TeamRepository
@inject PlayerRepository PlayerRepository
@inject MatchRepository MatchRepository

<div class="game-wrapper">
	<div class="game-content">

		@if (!startQuitMatchButtonClicked)
		{
			<div class="game-menu">
				<button class="btn btn-success" @onclick="StartQuitMatch"> Start Match </button>
				<button class="btn btn-light"> Manage Team</button>
			</div>
		}
		

		@if (startQuitMatchButtonClicked)
		{
			<div class="game-main">
				<div class="game-menu">
					<button class="btn btn-danger" @onclick="StartQuitMatch"> Quit Match </button>
					<button class="btn btn-light"> Manage Team</button>
				</div>
				<div class="game-scoreboard">
					<div class="game-scoreboard-team team-home">@homeTeam.Name</div>
					<div class="game-scoreboard-score">@homeStats.Goals.Count</div>
					<div class="game-scoreboard-score">@awayStats.Goals.Count</div>
					<div class="game-scoreboard-team team-away">@awayTeam.Name</div>
				</div>
				<div class="game-formations">
					<div class="game-scoreboard-formation">3-5-2</div>
					<div class="game-scoreboard-formation">4-2-4</div>
				</div>
				<div class="game-pitch-base">
					<div class="game-pitch-inner">
						<div class="game-zone">
							@foreach(var player in homeStats.TeamSquad)
							{
								if(player.PlayerPositions.Any(pos => pos.PositionType == "Goalkeeper") && !renderedPlayers.Contains(player.Id))
								{
									<div class="game-player-cmpnt" style="background-color: @homeTeam.PrimaryColor;color: @homeTeam.SecondaryColor;">
										<span class="gpc-number">@player.ShirtNumber</span>
										<span class="gpc-name">@player.LastName</span>
									</div>
									renderedPlayers.Add(player.Id);
								}
							}
						</div>
						<div class="game-zone">
							@foreach (var player in homeStats.TeamSquad)
							{
								if (player.PlayerPositions.Any(pos => pos.PositionType == "Defender") && !renderedPlayers.Contains(player.Id))
								{
									<div class="game-player-cmpnt" style="background-color: @homeTeam.PrimaryColor;color: @homeTeam.SecondaryColor;">
										<span class="gpc-number">@player.ShirtNumber</span>
										<span class="gpc-name">@player.LastName</span>
									</div>
									renderedPlayers.Add(player.Id);
								}
							}
						</div>
						<div class="game-zone">
							@foreach (var player in homeStats.TeamSquad)
							{
								if (player.PlayerPositions.Any(pos => pos.PositionType == "Midfielder") && !renderedPlayers.Contains(player.Id))
								{
									<div class="game-player-cmpnt" style="background-color: @homeTeam.PrimaryColor;color: @homeTeam.SecondaryColor;">
										<span class="gpc-number">@player.ShirtNumber</span>
										<span class="gpc-name">@player.LastName</span>
									</div>
									renderedPlayers.Add(player.Id);
								}
							}
						</div>
						<div class="game-zone">
							@foreach (var player in homeStats.TeamSquad)
							{
								if (player.PlayerPositions.Any(pos => pos.PositionType == "Forward") && !renderedPlayers.Contains(player.Id))
								{
									<div class="game-player-cmpnt" style="background-color: @homeTeam.PrimaryColor;color: @homeTeam.SecondaryColor;">
										<span class="gpc-number">@player.ShirtNumber</span>
										<span class="gpc-name">@player.LastName</span>
									</div>
									renderedPlayers.Add(player.Id);
								}
							}
						</div>

						<div class="game-zone-mid">
							<div class="game-zone-mid-circle"></div>
						</div>

						<div class="game-zone">
							@foreach (var player in awayStats.TeamSquad)
							{
								if (player.PlayerPositions.Any(pos => pos.PositionType == "Forward") && !renderedPlayers.Contains(player.Id))
								{
									<div class="game-player-cmpnt" style="background-color: @awayTeam.SecondaryColor;color: @awayTeam.PrimaryColor;">
										<span class="gpc-number">@player.ShirtNumber</span>
										<span class="gpc-name">@player.LastName</span>
									</div>
									renderedPlayers.Add(player.Id);
								}
							}
						</div>
						<div class="game-zone">
							@foreach (var player in awayStats.TeamSquad)
							{
								if (player.PlayerPositions.Any(pos => pos.PositionType == "Midfielder") && !renderedPlayers.Contains(player.Id))
								{
									<div class="game-player-cmpnt" style="background-color: @awayTeam.SecondaryColor;color: @awayTeam.PrimaryColor;">
										<span class="gpc-number">@player.ShirtNumber</span>
										<span class="gpc-name">@player.LastName</span>
									</div>
									renderedPlayers.Add(player.Id);
								}
							}
						</div>
						<div class="game-zone">
							@foreach (var player in awayStats.TeamSquad)
							{
								if (player.PlayerPositions.Any(pos => pos.PositionType == "Defender") && !renderedPlayers.Contains(player.Id))
								{
									<div class="game-player-cmpnt" style="background-color: @awayTeam.SecondaryColor;color: @awayTeam.PrimaryColor;">
										<span class="gpc-number">@player.ShirtNumber</span>
										<span class="gpc-name">@player.LastName</span>
									</div>
									renderedPlayers.Add(player.Id);
								}
							}
						</div>
						<div class="game-zone">
							@foreach (var player in awayStats.TeamSquad)
							{
								if (player.PlayerPositions.Any(pos => pos.PositionType == "Goalkeeper") && !renderedPlayers.Contains(player.Id))
								{
									<div class="game-player-cmpnt" style="background-color: @awayTeam.SecondaryColor;color: @awayTeam.PrimaryColor;">
										<span class="gpc-number">@player.ShirtNumber</span>
										<span class="gpc-name">@player.LastName</span>
									</div>
									renderedPlayers.Add(player.Id);
								}
							}
						</div>
					</div>
				</div>

				<div class="game-events">
					Match Events
				</div>
				<div class="game-teams">
					<div class="game-teams-home">
						<h5>@homeTeam.Name @homeTeam.Overall</h5>
						@foreach(var player in homeStats.TeamSquad)
						{
							<div class="gt-player">
								<span>@player.ShirtNumber</span>
								<span>@player.LastName</span>
								<span>G*</span>
							</div>
						}
					</div>
					<div class="game-teams-away">
						<h5>@awayTeam.Name @awayTeam.Overall</h5>
						@foreach (var player in awayStats.TeamSquad)
						{
							<div class="gt-player">
								<span>@player.ShirtNumber</span>
								<span>@player.LastName</span>
								<span>G*</span>
							</div>
						}
					</div>
				</div>
			</div>
		}
		
	</div>
</div>

@code {
	private List<Team> allTeams = new();

	private Team homeTeam = new();
	private Team awayTeam = new();

	private Match match = new();
	private MatchStats homeStats = new();
	private MatchStats awayStats = new();

	private HashSet<int> renderedPlayers = new(); // Track rendered players

	private bool startQuitMatchButtonClicked = false;

	private int selectedHomeTeamId;
	private int selectedAwayTeamId;

	protected override async Task OnInitializedAsync()
	{
		allTeams = await TeamRepository.GetAllTeamsAsync();
		FilterTeams();
		InitializeDevTeams();
	}

	private void FilterTeams()
	{
		allTeams = allTeams.Where(team => team.Players != null && team.Players.Count >= 5).ToList();
	}

	private void InitializeDevTeams()
	{
		homeTeam = allTeams.FirstOrDefault(t => t.Id == 10); //spain(id 10)
		awayTeam = allTeams.FirstOrDefault(t => t.Id == 1); //argentina(id 19),sporting(id 20),swe(1)

		if(homeTeam == null || awayTeam == null)
		{
			startQuitMatchButtonClicked = false;
			return;
		}

		homeStats.TeamSquad = SelectPlayersForMatch(homeTeam);
		awayStats.TeamSquad = SelectPlayersForMatch(awayTeam);

		startQuitMatchButtonClicked = true;
	}

	private List<Player> SelectPlayersForMatch(Team team)
	{
		var selectedPlayers = new List<Player>();
		var addedPlayers = new HashSet<int>();

		if (team.Players == null)
		{
			return selectedPlayers;
		}

		var positionPriority = new List<string> { "Goalkeeper", "Defender", "Midfielder", "Forward" };

		foreach (var position in positionPriority)
		{
			var playersInPosition = team.Players.OrderBy(p => p.Overall).Where(p => p.PlayerPositions.Any(pos => pos.PositionType == position) && !addedPlayers.Contains(p.Id)).ToList();

			int maxPlayers = position switch
			{
				"Goalkeeper" => 1,
				"Defender" => 4,
				"Midfielder" => 4,
				"Forward" => 2,
				_ => 0
			};

			var playersToAdd = playersInPosition.Take(maxPlayers).ToList();
			selectedPlayers.AddRange(playersToAdd);
			foreach (var player in playersToAdd)
			{
				addedPlayers.Add(player.Id);
			}
		}

		return selectedPlayers;
	}

	private void StartQuitMatch()
	{
		if (!startQuitMatchButtonClicked)
		{
			homeTeam = allTeams.FirstOrDefault(t => t.Id == selectedHomeTeamId);
			awayTeam = allTeams.FirstOrDefault(t => t.Id == selectedAwayTeamId);
			if (homeTeam == null || awayTeam == null)
			{
				return;
			}
		}
		startQuitMatchButtonClicked = !startQuitMatchButtonClicked;
	}
}

