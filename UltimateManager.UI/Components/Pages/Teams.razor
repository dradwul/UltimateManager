@page "/teams"
@using UltimateManager.Data.Repositories
@using UltimateManager.Domain.Models
@inject TeamRepository TeamRepository

<PageTitle>Teams</PageTitle>

<h1>Teams</h1>

<button class="btn btn-primary" @onclick="CreateTeam">
	@if (newTeamButtonStatus)
	{
		<span> Cancel </span>
	}
	else
	{
		<span> New Team </span>
	}
</button>

<button class="btn btn-outline-info" @onclick="UpdateAllTeamsOverall">
	Update All Teams Overall
</button>

@if (newTeamButtonStatus)
{
	<form class="form-horizontal" @onsubmit="AddTeam">
		<div class="mb-3">
			<label for="newTeamName" class="form-label">Team Name</label>
			<input type="text" class="form-control" id="newTeamName" @bind-value="newTeam.Name" required />
		</div>
		<div class="mb-3">
			<label for="newTeamPrimaryColor" class="form-label">Primary Color</label>
			<input type="text" class="form-control" id="newTeamPrimaryColor" @bind-value="newTeam.PrimaryColor" required />
		</div>
		<div class="mb-3">
			<label for="newTeamSecondaryColor" class="form-label">Secondary Color</label>
			<input type="text" class="form-control" id="newTeamSecondaryColor" @bind-value="newTeam.SecondaryColor" required />
		</div>
		<button type="submit" class="btn btn-success">Save</button>
	</form>
}

<hr />

@if(allTeams == null)
{
	<p><em>Loading...</em></p>
}
else
{
	<table class="table">
		<thead>
		<tr>
			<th> Team </th>
			<th> Color </th>
			<th> Overall </th>
			<th> Players </th>
			<th></th>
		</tr>
		</thead>
		<tbody>
		@foreach(var team in allTeams)
		{			
			<tr>
				<td>
					<a href="/teams/@team.Id">
						@team.Name
					</a>
				</td>
				<td>@team.PrimaryColor / @team.SecondaryColor</td>
				<td>@team.Overall</td>
				<td>@team.Players?.Count</td>
				<td>
				<button class="btn btn-danger" @onclick="() => DeleteTeam(team)"> 🗙 </button>
				</td>
			</tr>
		}
		</tbody>
	</table>
}


@code {
	List<Team> allTeams = new();
	Team newTeam = new();

	private bool newTeamButtonStatus = false;

	protected override async Task OnInitializedAsync()
	{
		allTeams = (await TeamRepository.GetAllTeamsAsync()).OrderBy(t => t.Name).ToList();
	}

	private void CreateTeam()
	{
		newTeamButtonStatus = !newTeamButtonStatus;
	}

	private async Task AddTeam()
	{
		await TeamRepository.SaveTeamAsync(newTeam);
		newTeam = new();
		StateHasChanged();
	}

	private async Task DeleteTeam(Team team)
	{
		await TeamRepository.DeleteTeamAsync(team);
		StateHasChanged();
	}

	private async Task UpdateAllTeamsOverall()
	{
		await TeamRepository.UpdateAllTeamsOverallAsync();
	}
}